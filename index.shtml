<!--#include virtual="/~TDDD63/include/defaults.sv.shtml" -->
<!--#set var="navbarName" value="XPilot-AI" -->
<!--#set var="pageTitle"  value="$navbarName | $coursePageTitlePrefix" -->
<!--#set var="pageCSS" value="highlight/sh_style.css" -->
<!--#include virtual="$PAGE_HEADER" -->

<script type="text/javascript" src="highlight/sh_main.js"></script>
<script type="text/javascript" src="highlight/sh_python.js"></script>
<script type="text/javascript" src="highlight/sh_sh.js"></script>

<style type="text/css">
  PRE.sh_sh { margin-bottom: 1em; padding: 1ex; border-radius: 0.6ex;}
  PRE.sh_python { margin-bottom: 1em; padding: 1ex; border-radius: 0.6ex; line-height: 110%;}

  .todo { background: #ffaaaa; margin-bottom: 1em; padding: 1ex; border-radius: 0.6ex; }

  CODE, TT, PRE {
    font-family: Lucida Sans Typewriter, monospace;
    font-size: 90%;
  }

  DIV.one_column, DIV#content DIV.text {
    max-width: 42em;
    line-height: 165%;
    font-size: 110%; /* Compensate for font being smaller than default */
    font-family: Georgia,Times New Roman,tahoma,verdana,sans-serif;
  }

  PRE {
    font-size: 80%;
    margin-botton: 20
  }

  PRE.sh_python {
    width: 54em;
  }


</style>

<!-- TODO MAYBE:

     + Movies for tasks

     + Should the title be changed to "XPilot-AI project"?

-->

<h1>TDDD63: XPilot-AI project</h1>

<h2>Introduction</h2>

<p>
  Computer games have given rise to a huge industry in the latest
  decade or two.  As you are certainly aware of, these games are
  generally interactive: You &ndash; the player &ndash; must
  personally control what happens for a long period of time.  In a
  racing game you must control a car, choosing the right gear and
  steering in the right direction.  In Tetris you must move and rotate
  colored blocks, and so on.  This obviously takes a lot of time.
  Wouldn't it be nice if you had someone else who could play the
  games <em>for</em> you, relieving you of this great burden and
  allowing you to spend more time developing software instead?
</p>

<p>
  Well, maybe not.  But it can still be a lot of fun to take a
  completely different approach to gaming: Trying to write
  a <em>bot</em>, a software robot, that plays the game for you.  This
  idea is not new and has in fact led to the concept of
  <a href="http://en.wikipedia.org/wiki/Programming_game">programming
  games</a>, where you can measure your programming skills against
  those of your opponents or simply against the game itself.
</p>

<p>
  Programming games have history of over 50 years, going back at least
  to the year 1961
  when <a href="http://en.wikipedia.org/wiki/Darwin_%28programming_game%29">Darwin</a>
  was invented.  In this programming game, players were executed on
  an <a href="http://en.wikipedia.org/wiki/IBM_7090">IBM 7090</a>, a
  multi-million-dollar 0.46 MHz 36-bit mainframe (not 32!) with 144 kB
  of memory that was one of the first generations of computers running
  on transistors rather than vacuum tubes.
<p>

<p>
  Fortunately for you we do not have such a system available, so you
  will instead be using Python on the IDA Sun machines.  You will also
  use a different game as the basis for your bots.  There is a classic
  game called <a href="http://en.wikipedia.org/wiki/XPilot">XPilot</a>
  where the players control a spaceship flying around and trying to
  shoot the enemy. XPilot-AI is an existing project that adds the
  possibility to write Python programs that control the spaceships
  using artificial intelligence (AI). The goal of your TDDD63 project,
  then, will be to write programs that
  implement <a href="http://en.wikipedia.org/wiki/Intelligent_agent">intelligent
  agents</a> (bots)
  and <a href="http://en.wikipedia.org/wiki/Multi-agent_system">teams
  of intelligent agents</a> that control the spaceships.
</p>

<p>
  The <a href="http://xpilot-ai.org/">official XPilot-AI</a> is maintained at
  Connecticut College, but
  over the course of the summer John Litborn, a student at LiU, have
  forked the code and improved on it. The code is open source and
  anybody can read the code and report bugs, request features and
  submit patches. Interested students can contact him at johli603@student.liu.se 
  or through your assistant.
</p>

<!--
<div class="todo">
<p>Do you need this reference somewhere? No!
</p>
<p><a href="http://en.wikipedia.org/wiki/Robotic_paradigms">http://en.wikipedia.org/wiki/Robotic_paradigms</a>
describes different robotic paradigms. Some of the tasks in this
project can be implemented just using the reactive paradigm but for
others the hybrid deliberate/reactive paradigm are needed.  </p>
</div>
-->

<h2>Documentation</h2>

<p>Start by reading the Wikipedia article about XPilot:</p>
<ul>
<li>Wikipedia: <a href="http://en.wikipedia.org/wiki/XPilot">http://en.wikipedia.org/wiki/XPilot</a></li>
</ul>

<p>To learn how to play XPilot read the tutorial here:</p>
<ul>
<li>XPilot tutorial: <a href="http://www.j-a-r-n-o.nl/newbie">http://www.j-a-r-n-o.nl/newbie</a></li>
</ul>

<p>Here is a list of useful links to browse when you need more information.</p>
<ul>
<li>Official XPilot site: <a href="http://xpilot.org/">http://xpilot.org/</a></li>
<li>XPilot-AI fork: <a href="https://bitbucket.org/hatten/xpilot-ai-fork/">https://bitbucket.org/hatten/xpilot-ai-fork/</a></li>
</ul>

<h2>Installation and Running Programs</h2>

<h3>On Student Sun Systems</h3>

<p>The programs needed are already installed on the Sun system for
students. The path to the binaries and libraries is:</p>
<pre class="sh_sh">   /home/TDDD63/projects/xpilot-ai/</pre>

<p>You have to make sure that the binaries and libraries are found. To
do that on the Sun system do the following:</p><p>
</p><pre class="sh_sh">   module add /home/TDDD63/modulefiles/xpilot-ai
</pre>

<p>Or to permanently add it to an init file (you just have to do this
  once and then the module will be added automatically every time you
  log in):</p><p>
</p><pre class="sh_sh">   module initadd /home/TDDD63/modulefiles/xpilot-ai
</pre>

<h3>On Linux or Mac</h3>

<p>
  If you want to run this on your own Linux or Mac computer, follow
  the <a href="http://xpilot-ai.org/docs/install.html">installation
  instructions</a>.  In this case we assume that you already have some
  experience working with the command line / shell!  
  And for Mac you might need some skill in getting things to work since it did
  not compile out of the box on an Mac with newer OS than the one mentioned in the
  instructions.
  Note that for
  Linux the default procedure described in the instructions will work
  for Ubuntu 12.04 and possibly earlier versions also. For Debian
  stable you should replace the startup script
  with <a href="http://heyer.ida.liu.se/xpilot-ai/xpilot-ai-1.0-debian-stable.sh">xpilot-ai-1.0-debian-stable.sh</a>
  instead.</p>

<p>On your platform you have to make sure that libraries and other
files are found. Here is an example of how to do that in the .bashrc
file when XPilot-AI is installed in /home/tompe/pkg/xpilot-ai:</p>

<pre class="sh_sh">   #
   # Place the following three lines at the end of the .bashrc file
   #
   export LD_LIBRARY_PATH=/home/tompe/pkg/xpilot-ai/python:$LD_LIBRARY_PATH
   export PYTHONPATH=/home/tompe/pkg/xpilot-ai/python:$PYTHONPATH
   export PATH=/home/tompe/pkg/xpilot-ai:$PATH
</pre>

<h3>Running Remotely</h3>

<p>It is possible to run these programs on a Sun server and still view
  their graphical user interface on your own computer, at home or at
  the university.  To do this, you need
  an <a href="http://en.wikipedia.org/wiki/X_Window_System">X Window
  System</a> server (the standard Unix/Linux window system) on your
  own computer, where the GUI will be displayed.  This is most likely
  already installed if you are using a Linux machine.  If you are
  using Windows, you can install and
  use <a href="http://en.wikipedia.org/wiki/Xming">Xming</a>.
</p>

<p>
  If you do have an X Window System Server on your machine, you can
  then log in to the <code>remote-und</code> server at IDA using SSH.  If
  you are using Linux, you do the following:</p>

<pre class="sh_sh">ssh -X fffnn123@remote-und
</pre>

<p>This gives you a command prompt on <code>remote-und</code>, where
  any graphical program started on that machine will be displayed on
  your own computer.  If you are using Windows, you will have to find
  a suitable SSH client, for
  example <a href="http://www.putty.org/">PuTTY</a> (a PuTTY version
  can optionally be installed during the Xming install process) and
  configure it for X forwarding.</p>

<h3>Virtual Ubuntu Machine</h3>

<p>
  XPilot-AI currently does not work natively on Windows.  If you still
  want to run the project locally on a Windows machine, one possible
  solution is to install Ubuntu 12.04 in a virtual machine. One way to
  do that is to
  install <a href="https://www.virtualbox.org/">VirtualBox</a>, create
  an Ubuntu 12.04 virtual machine, and then go through the Linux
  installation instructions above.
</p>


<h2>Different Python versions</h2>

<p>Here is a list giving the default python3 version on different systems:</p>
<ul>
<li>Sun System: Python 3.2.2</li>
<li>Ubuntu 12.04: Python 3.2.3</li>
<li>Debian Stable: Python 3.1.3</li>
<li>Mac Mountain Lion 10.8: Seems not to be installed. If installing it yourself: Python 3.3.0</li>
<li>Windows: No Python installed as default. If installing it yourself: Python 3.3.0</li>
</ul>

<p>The assistant uses Debian Stable and will use this to test against
when getting email questions, so the best thing is <b>not to use Python
    language constructs that only exist in 3.2 or higher!</b></p>


<h2>Playing a Game</h2>

<p>It is recommended that you play some games of XPilot to become more
familiar with it and explore its functionality.</p>

<h3>Starting a Server</h3>

<p>
  The first step to take when you want to play a game of XPilot is to
  start a game server.  It is important to know that if you want to
  start more than one XPilot server on the same computer you have to
  use different ports for the different servers.  This may not be the
  case if you are working on your own computer, but several SunRay
  clients in the Sun PULs can connect to the same Sun server and
  therefore there could be <b>conflicts with other groups</b>, even
  those working in another PUL.  Because of that the XPilot server
  should start on a unique port for different project groups if you
  are not running on a private computer. The default port is
  15345. Each group has a number n and should use port 15345+n to
  avoid connecting to each other's servers. For example, group 5 uses
  the port 15350.
</p>

<p>Start the server with the default map (assuming group 1):</p>
<pre class="sh_sh">    xpilots -noQuit +reportToMetaServer -port 15346
</pre>

<p>The flag <code>+reportToMetaServer</code> means that your locally
  started server will NOT report to the central meta server that keeps
  track of all currently running XPilot servers across the Internet.
  This is to avoid having other players around the world joining your
  game.
</p>

<p>The flag <code>-noQuit</code> will make the server stay alive after
  every player quit. This is often convenient but you can remove the 
  option if that is undesired.
</p>

<p>By default you can only connect 2 clients from the same IP number to a server.
To change that use the flag <code>-maxClientsPerIP</code>. For example:</p>
<pre class="sh_sh">    xpilots -noQuit +reportToMetaServer -port 15346 -maxClientsPerIP 10
</pre>



<h3>Starting a Client</h3>

<p>Start a client:</p>
<pre class="sh_sh">    xpilot -join -port 15346
</pre>

<p>
  And then start playing (and reading if necessary) until you feel you
  understand the basic dynamics of the game.
</p>

<h2>Maps</h2>

<p>When installing XPilots-AI some standard maps are installed. When
starting the XPilot server with a specific map the full path to the
map has to be given. On the Sun systems the path to the standard maps
is:</p>
<pre class="sh_sh">      /home/TDDD63/projects/xpilot-ai/maps/
</pre> 
<p>For example, to start the XPilot server with the standard map cross.xp (assuming group 1):</p>
<pre class="sh_sh">    xpilots -map /home/TDDD63/xpilot-ai/maps/cross.xp -noQuit \
    +reportToMetaServer -port 15346
</pre>


<p>There are some TDDD63 project specific <a href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/">maps</a> available:</p>
<ul>  
<!--
  <li><a
  href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/empty.xp">empty.xp</a>:
  Empty map with wrap around. The friction for this map is set to
  0.05.</li>

  <li><a
   href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/emptynofriction.xp">emptynofriction.xp</a>:
   Empty map with wrap around. The friction for this map is set to
   0.0. The shot mass is set to 0 which lead to no movement of ship
   when firing a shot.</li>
-->

  <li><a
       href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/emptyborder.xp">emptyborder.xp</a>:
       Empty map with a border which spaceships bounce in. The
       friction for this map is set to 0.05 and the shotspeed to 10.</li>

  <li><a
       href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/emptybordernofriction.xp">emptybordernofriction.xp</a>:
       Empty map with a border which spaceships bounce in.  The shotspeed for this map is set to 10.</li>

  <li><a
       href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/emptyborderlarge.xp">emptyborderlarge.xp</a>:
       Empty large map with a border which spaceships bounce in. The
       friction for this map is set to 0.05 and the shotspeed to 10. To be used if a larger
       area is needed to fly in.</li>


  <li><a
       href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/simple.xp">simple.xp</a>:
       A simple map with boundary which spaceships can crash into and
       die. The shotspeed for this map is set to 21.</li>

  <li><a
       href="http://heyer.ida.liu.se/xpilot-ai/tddd63maps/obstacle.xp">obstacle.xp</a>:
       A simple map with boundary which spaceships can crash into and
       die and obstacles that have to be avoided. The friction for
       this map is set to 0.1.</li>

</ul>
<p>On the Unix system these maps can be found in the directory:
<pre class="sh_sh">      /home/TDDD63/projects/xpilot-ai/tddd63maps/
</pre> 

<p>To start the XPilot server with a map called simple.xp (assuming group 1).</p>
<pre class="sh_sh">
    xpilots -map /home/TDDD63/projects/xpilot-ai/tddd63maps/simple.xp -noQuit \
    +reportToMetaServer -port 15346
</pre>



<p>There is also a mapeditor <code>xp-mapedit</code> that can be used
to edit existing maps or creating new maps. If some parameters have bad values for the
task feel free to change some of the values and if new values work better please
check with the assistant that it is OK and so the new better values can be given to
the other groups also. It is also possible to edit the map files in a text editor.</p>

<p>The consequence of having a non-zero friction value is that the spaceship will stop after a while
if no thrust is applied. This makes it much easier to control the spaceship.</p>

<h2>Python API for XPilot-AI</h2>

<p>The Python API
  (<a href="http://en.wikipedia.org/wiki/Application_programming_interface">Application
  Programming Interface</a>) for XPilot-AI
  is <a href="http://xpilot-ai.org/docs/library.html">briefly
  documented</a>.</p>

<p>Note that if the documentation for example says:</p>
<pre class="sh_sh">   int asteroidX(int i) - Returns the specified enemy's X coordinate. 
</pre>
<p>Then the argument to <code>asteroidX</code> must be
an <code>int</code>. If it is not an <code>int</code> the call will
throw an exception (signal an error).</p>
<p>
  The <code>int</code> before the function name specifies the type of the value that the
  function returns.
</p>

<p>
  Notice also that i stands for index. The respective count function, in this case 
</p>
<pre class="sh_sh">   int asteroidCountScreen() - Returns the number of asteroids on the screen.
</pre>
<p>
  will give the number of valid items you can access with the index. Note that since
  the numbering starts at 0 the maximum index is one less than the number returned
  by the count functions. The API will return an error if you try to access an index
  that's out of the valid range.
</p>


<p>
  The main coordinate system uses pixels. Most functions use it, unless specifically noted.
  The size of the map in pixels can be retrieved with <code>int mapWidthPixels()</code> and
  <code>int mapHeightPixels()</code>.
</p>

<p>
  The radar (top left) functions uses different coordinates, which are much less
  precise than pixels. This should only be used when handling objects that are far away
  and not on you screen. The size of the map is given by <code>int radarWidth()</code>
  and <code>int radarHeight()</code>.
  You can convert an X radar coordinate to pixel coordinates by dividing with
  <code>int radarWidth()</code> and multiplying with <code>int mapWidthPixels()</code>,
  and with the respective height functions if handling a Y coordinate.
</p>

<p>
  The last coordinate system is blocks. This is what the mapfile uses when specifying
  how the map should be. Dimensions of the map in blocks can be retrieved with 
  <code>int mapWidthBlocks()<code> and <code>int mapHeightBlocks()</code>.
  Converting a block coordinate to pixels is done by multiplying with <code>int blockSize()</code>
</p>

<p>
  The API supports three different angular measurements: radians, degrees and xdegrees.
  Radians is recommended to use most of the time, as that is what python's trigonometric
  functions uses by default.
  Degrees is useful for human readability, and it's recommended that you use it when
  debugging and printing.
  Xpilot degrees is the angular measurement that xpilot uses, ranging from 0 to 127. It
  is only possible to turn (and turn to) whole xpilot degrees. For example you cannot turn
  5 degrees (1.422 xdeg), so the ship will turn 2.8125 (1 xdeg) instead. This is not noticeable
  most of the time and the API will do all necessary rounding behind the scenes so you will 
  probably never have to use the xdeg functions.
</p>

<p>
  There are many functions in the API to ease the handling of angles:
  <code>double radToDeg(double rad)</code> and similar functions will
  convert between them.
  <code>angleDiffRad(double angle1, double angle2)</code> will
  return the absolute difference between two angles. This is useful
  to know if you are heading towards your desired direction.
  <code>angleAddRad(double angle1, double angle2)</code>. Will add
  two angles to eachother.
  There are similar functions for degrees and xdegrees.
</p>



<h2>Example Bot Code</h2>

<p>The Python interface works in the way that it gets regular
callbacks to a specific function that can do useful things. These kind
of callbacks are sometimes called "ticks". The system ticks your
program one step which usually corresponds to a specific time
step.</p>

<p>So the bot code will get a call for each "tick" and you can then
decide what to do. Exactly what should be done most probably depends
on what has happened before, therefore that information must be stored.
One way to do that is to implement the bot code as
a <a href="http://en.wikipedia.org/wiki/Finite-state_machine">state
machine</a> where the state in a sense encodes this history
information.</p>

<p>
  Here is code for a minimal example, where the AI simply shoots every tick
</p>
<pre class="sh_python">
import libpyAI as ai

def AI_loop():
    ai.fireShot()

ai.start(AI_loop,["-name","Shooter"])
</pre>

<p>Here is the code for a <a href="stub.py">stub program</a> that can be used as a starting
point for the bots that are going to be written in this project.
  In the current code the AI doesn't actually do anything, this is just a minimal example.
</p>



<h3>Running a Bot</h3>

<p>If you have used the Python stub given above the bot program is started by
using the group flag in the following way (assuming your program is called stub.py):</p>
<pre class="sh_sh">  python3 stub.py -port 15346
</pre>

<p>Notice that is is possible to use the keyboard to control the spaceship when
running the Python bot program.</p>

<h2>Project: Introductory Phase</h2>

<p>The project tasks for the introductory phase are to write one or
more bot programs that do the tasks below. The tasks should be
implemented in order.</p>

<ol>

    <li><p>
    <h4>Shoot stationary targets</h4>
    Destroy all targets before they reappear.<br>
    Start with the provided <a href="exc1_code_skeleton.py">skeleton code</a>
    which contains recommended functions.
    For further instructions on the recommended functions read the relevant parts of the
    <a href="library">library</a>. Tips: Search for the function names on the page with ctrl-f.
    </li></p>

    <li><p>
    <h4>Race</h4>
    Goal: Complete all three laps.<br>
    This exercise introduces a new game mode, race (or timing, as it's also called), which consists
    of flying through several checkpoints on time, completing a set amount of laps. The easiest way
    to do this is to fly towards the next checkpoint, start braking the ship (turn around and thrust)
    at a certain distance and when still fly towards the next checkpoint. For that you need a minimum
    of two states, "travel" and "stop", but it can be useful to have more.<br>
    Start with the <a href="stub.py">stub</a> program.<br>
    Recommended functions: <a href="library#race">checkpoint</a>,
    <a href="library#movement">movement</a>,
    <a href="library#self">self</a> and those introduced in exercise 1.
    </li></p>

    <li><p>
    <h4>Distant stationary targets</h4>
    Goal: Shoot down all four targets before they respawn.<br>
    This exercise is very similar to the first one, except for the map being bigger and the ship being able to move.
    Shots fired retains the velocity of your ship, so it is much easier to hit the targets
    if you stop the ship.<br>
    Recommended functions:
    <a href="library#self">self</a>,
    <a href="library#movement">movement</a>,
    <a href="library#targets">targets</a> and those introduced in earlier exercises.




<!--
<li><p>SEEMS TO BE HARD TO IMPLEMENT. SHOULD ALL TASKS WITH
obstacle.xp BE MOVED TO A MILESTONE OR EXTENSION IN THE MAIN PHASE?
Fly to a specific position while avoiding obstacles and walls and stop
at the specific position. Use the map obstacles.xp and use the
<code>wallFeeler()</code> function to detect walls and obstacles.  The
obstacle.xp map is designed in a way that flying so you get nearer to
the target while avoiding obstacles will finally get you to the
target.</p></li>
-->

<!--
<li><p>MAYBE MVED TO MAIN PHASE??? Add enough functionality to have a
reasonable death match with two bot player using the map
obstacle.xp.</p></li>
-->

</ol>


<h2>Project Main Phase</h2>

<p>In the main phase you have the option of choosing the project
described below, with cooperating bots, or inventing your own project
which then should be on a similar level as the pre-defined one. For
the pre-defined project most of the functionality you implemented in
the introductory phase will be useful. If you design your own project
it has to be approved by the assistant.</p>

<p>Also remember that it is possible to design your own maps using the map
editor and use them in the project. For some type of testing that might be
the best thing to do. And you can also design new maps to be used
if you choose to invent your own project.</p>

<!--
<p>Choose at least 2 of the bigger projects below to implement.???</p>

<h3>Racing</h3>
<p>Use the map gp.xp. The map contains pass points that are "visible"
from the previous pass point. So the problem is to fly to the sequence
of pass points as fast as possible and avoid colliding with things
that slow down the flying. The bot program should read the map file
and parse it to get the pass points. It is also allowed to parse the
file to get the walls. It is also allowed to use the radar during
flight.</p>

<p>Possibility to have a competition between groups.</p>
-->

<h3>Project: Bots Cooperating in Teams</h3>

<p>If you choose this project, you will implement a bot that works in
a team with other instances of the same bot. This project includes
inventing your own very simple communication language and implementing
the parsing of it.</p>

<p>To help with the communication code a help class <a
href="botcom.py">BotCom</a> have been written and documentaion can be
found <a href="botcom.html">here</a>. The <a href="teamstub.py">team stub
program</a> shown in the appendix shows how to use the BotCom class.
</p>

<p>The milestones should during development at least be tested with a
  team size of 3 but the program should work for bigger team sizes so
  it is good to test with for example team sizes 5 and 7
  sometimes. Remember to start the server with the flag <code>-maxClientsPerIP</code> specifying
  for example 10 as the maximum.
</p>

<p>
  Below is a list of milestones specified as a list of team activities
  that the cooperating bot programs should be able to handle.
  Implement them in the order they are specified.
</p>

<p>
  As in all TDDD63 projects it is difficult to predict exactly how
  many milestones you will be able to complete.  You might implement
  all of them and continue with additional extensions, or you may not
  be able to complete the entire list.  To make sure you are
  progressing at a sufficient pace, keep your assistant up to date on
  your progress during the progress report sessions!
</p>

<ol>

<li><p>Fly in formation. Communicate among the leader and members of the team
to decide which position a spaceship should
assume and so on. Implement different formations and
change between them while flying around. Use for example the
<b>emptyborderlarge.xp</b> map to test with.  Note that the  way
to get the position of the other ships in the team fast enough is to use the
BotCom based communication.
</p></li>

<li><p>Team that shoots down enemies. Design scenarios were
cooperation is used. One example of that is to suppose that only one
spaceship have a radar to find the enemies and only the other
spaceships can fire and destroy the enemy. In this milestone the enemies can be single
ships that do not cooperate and do not fire back.</p></li>

<li><p>The <b>obstacle.xp</b> is 32x32 in size. Each wall element
corresponds to one square. Read in the map file and build up a data
structure representing the world with the walls. Use that map to fly the spaceship
to specific positions in the world.
</p></li>

<li><p>Given that all bots in the team have read in the map <b>obstacle.xp</b>.
The task here is to have moving and non-moving enemies in the <b>obstacle.xp</b> world
and cooperate as a team to decide who will kill who and then kill all the enemies.
</p></li>

<!--
<li><p>Team that shoots down asteroids. Have the team cooperate in
some way to avoid killing your own team members. THIS MUST BE TESTED
TO SEE THAT IT IS POSSIBLE TO DETECT ASTEROIDS.</p></li>
-->

<li><p>Implement the functionallity for team death matchs. Demonstrate
by competing with yourself or with other groups bot programs.
Implement different strategies that a team can have (for example
defensive, aggressive, ...). The bots for one team should not read the
other teams talk messages so the messages has to be marked with a team
identifier. Feel free to construct your own maps here that suits the
functionality that has been implemented.</p></li>

<li><p>Build a map of the environment by letting different members of
the team explore different parts of the world and communicate the
result between the team members continuously. The code should work for
the <b>obstacle.xp</b> map but feel free to test it with other maps
also. Use the <code>wallFeeler()</code> function to create the map
the environment.</p></li>

<li><p>Team death matchs while simultaneously building and using the
partial map of the environment.</p></li>

<!--
<li><p>Have a tournament between teams.</p></li> 
-->

</ol>


<h2>Appendix</h2>

<p>The appendix collects information that can be useful in solving the
project tasks. Do not feel that you have to use the things presented
here if you have some other ideas about how to solve the problem
tasks.
</p>

<h3>teamstub.py</h3>

<p>Here is the code for a <a href="teamstub.py">stub program</a> that can be used as a starting
point for the cooperating bots that are going to be written in this project:</p>


<h3>Geometry</h3>

<p>The <a href="http://en.wikipedia.org/wiki/Atan2">atan2</a> function is very useful to compute
a direction and is useful in a lot of the project tasks. For exampe suppose we have
ship S0 and S1 and we want to compute the heading that ship S0 should have to point towards
S1:</p>
<pre class="sh_python">
     heading = (int (math.degrees (math.atan2 (y1-y0, x1-x0))) + 360) % 360
</pre>



<script type="text/javascript">
  window.onload = sh_highlightDocument;
</script>

<!--
<h3>FSM in Python</h3>

<p>Maybe describe an FSM module here. Or maybe it is better to just write the programs
without support for FSM?</p>
-->

<h3>Python Style Guide: PEP 8</h3>

<p>When programming it is good to follow some style guide. On popular
guide for Python programs are <a
href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a>. The example
programs in this document does not follow this guide exactly but that
is no reason not to read the style guide and follow it.</p>

<p>Here are the most important points of PEP 8 (taken from the Python 3.3 tutorial):</p>
<ul>

<li>Use 4-space indentation, and no tabs.

4 spaces are a good compromise between small indentation (allows
greater nesting depth) and large indentation (easier to read). Tabs
introduce confusion, and are best left out.
</li>

<li>Wrap lines so that they don't exceed 79 characters.

This helps users with small displays and makes it possible to have
several code files side-by-side on larger displays.  </li>

<li>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</li>

<li>When possible, put comments on a line of their own.</li>

<li>Use docstrings.</li>

<li>Use spaces around operators and after commas, but not directly inside
bracketing constructs: a = f(1, 2) + g(3, 4).</li>

<li>Name your classes and functions consistently; the convention is to use
CamelCase for classes and lower_case_with_underscores for functions
and methods. Always use self as the name for the first method argument
(see A First Look at Classes for more on classes and methods).</li>

<li>Don't use fancy encodings if your code is meant to be used in international environments. Python's default, UTF-8, or even plain ASCII work best in any case.</li>

<li>Likewise, don't use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</li>

</ul>



<!--#include virtual="$PAGE_FOOTER" -->


