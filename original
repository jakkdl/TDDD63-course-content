Project: Introductory Phase

The project tasks for the introductory phase are to write one or more bot programs that do the tasks below. The tasks should be implemented in order.

    Aim the spaceship without moving it and try to shot down a target that is still. Use the ordinary xpilot client to start the target. Use the map emptyborder.xp. Also use both the radar functions and the closestShipId() function.

    Fly so you fly over (inside a radius of 10) a specific position and stop applying thrust (the friction will slow down and stop the ship) when you are inside the radius. Use the map emptyborder.xp (bouncing border). Note also that the applying of thrust might have to be "pulsed" since if thrust is applied a longer time the resulting speed will be too high. Note also that the method with constant bearing described in the appendix can work as inspiration here. Let the program print out the map coordinates for the ship and for the goal so it is easy to see that the goal is reached.

    Move the spaceship and shoot down targets that are still. Use the ordinary xpilot client to start the targets. Use the map emptyborder.xp. Do not fire until the spaceship is near the enemy. Use the radar functions to fly towards the enemy and when you are so near that closestShipId() works then first stop the ship (disabling thrust and wait for speed 0) and then use the id to get the information about the enemy that you need to shoot down the enemy.

    Fly to avoid being shot at. Use the ordinary xpilot client to manually control a spaceship and shoot at the robot player. Also test with the bot implemented in the previous task (move space ship and shoot down targets). Use the map emptyborder.xp. The robot player should detect dangerous shots being fired and fly the ship to avoid being hit if it is possible to do that. It is enough to have a reactive behaviour and just detect if a shot will hit you and move to avoid it. This will work well if just one shot is fired at the time.

    Fly around and do not hit walls. Use the map simple.xp. The example program above (test2.py) bounces in walls plus that it will collide sooner or later. So the task here is to avoid hitting the wall at all. One test case that is enough for this task is to use the keyboard to fly in a direction that will hit a wall (all direction in simple.xp, the map has 0 friction) and let the program handle the situation when we are near the wall. One possible strategy is to turn around and stop (apply thrust until speed is zero). Another is to turn around and fly in the opposite direction (apply thrust until the ship move in the heading direction). If you want to put random flying in the program, add a new command line option controlling whether randomness is used or not, so that the program will work for the test case above. Also notice that you might have to use the function setTurnSpeed().

    Shoot down targets that are moving, by just aiming the spaceship without moving it. Use the ordinary xpilot client to manually control an enemy ship that moves around. Use the map emptybordernofriction.xp. It is enough to use the closestShipId() function here. The enemy ship has to be near enough to see it on the map. There is an aimdir() function in the API but you should not use that function. Instead the main new thing in this task is to write your own aimdir function. To write an aimdir function you have to know the enemy ship's speed, the direction it is moving in and the speed of a shot. With these inputs you can compute the angle to aim your ship.

    Move the spaceship and shoot down targets that are moving. Use the ordinary xpilot client to manually control an enemy ship that moves around. Use the map emptyborder.xp. Do not fire until the spaceship is near the enemy. Use the radar functions to fly towards the enemy and when you are so near that closestShipId() works use the id to get the information about the enemy you need to shoot down the enemy.

    Move the spaceship and shoot down targets that are moving. Use the ordinary xpilot client to manually control an enemy ship that moves around. Use the map simple.xp which means the walls have to be avoided. Do not fire until the spaceship is near the enemy.

    Move the spaceship and shoot down targets that are moving and shooting back. Use the program from task number 7 as the enemy. Use the map emptyborder.xp. The task includes avoiding being hit by a shot from an enemy so that should be demonstraded (can be done with the ordinary xpilot client).

    Add functionality to "follow" another spaceship. Use the map emptyborder.xp to test this functionality. You can assume that the ship that is followed is moving away (does not turn around to move towards you, which could lead to a collision). Then following the ship will require trying to be neither too close not too far away from the ship. This may not always succeed, so print out a message whenever the follower does come too near or too far according to reasonable min/max threshold distances. This will help you when you try to tune the acceleration / braking / turning parameters. To avoid getting too near the ship must be able to turn and brake in order to handle the case when the followed ship stops.

    Add enough functionality to have a reasonable death match between two bot players (for example two instances of your own bot or try your bot against another group's bot). Use the map emptyborder.xp. One possible extra functionality to add here is some strategy that moves the spaceship in a way suitable for winning a death match.
